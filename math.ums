#
# Homework 8:RPN Calc
# 4/30/18
# Andres Fuentes and Ruchelly Almeida
# math.ums: Module containing implementation of the RPN calc math functions  
#
      .zero r0
      .temps r6, r7

      .section text

add:
      output "in add function"
      //push r1 on stack r2  
      push r4 on stack r2  

      //goto check1 linking r1 
      r1 := m[r0][r3]                  //r4 (top value on value stack)
      r4 := m[r0][r3+1]                //r3 (top+1 value on value stack)
      r1 := r1 + r4                 
                 
      pop stack r3                     
      pop stack r3
      push r1 on stack r3              

      pop r4 off stack r2 
      //pop r5 off stack r2               //pop return address (r1) off into r5
      
      goto waiting                       // go back to main loop
################################################################################
############################## sub     ########################################
###############################################################################
sub:
      //push r1 on stack r2
      push r4 on stack r2  
      
      r1 := m[r0][r3]                    //r4 (top val on value stack)
      r4 := m[r0][r3+1]                  //r3 (top+1 val on value stack)
      r1 := r1 - r4         
      pop stack r3                     
      pop stack r3
      push r1 on stack r3  

      pop r4 off stack r2                // restore non-volatile registers
      //pop r5 off stack r2              //pop return address (r1) off into r5
      
      goto waiting                       // goto return address

################################################################################
############################## mult     ########################################
###############################################################################
mult:
      //push r1 on stack r2  
      push r4 on stack r2  
      
      r1 := m[r0][r3]                    //r4 (top val on value stack)
      r4 := m[r0][r3+1]                  //r3 (top+1 val on value stack)
      r1 := r1 * r4         
      pop stack r3                     
      pop stack r3
      push r1 on stack r3  

      pop r4 off stack r2               // restore non-volatile registers
      //pop r5 off stack r2             //pop return address (r1) off into r5
      
      goto waiting                      // goto return address

################################################################################
############################## DIVISION ########################################
################################################################################
div:
      //push r1 on stack r2
      push r4 on stack r2  
      
      r1 := m[r0][r3]                    //r4 (top val on value stack (y))
      r4 := m[r0][r3+1]                  //r3 (top+1 val on value stack (x))

      if (r1 == 0) goto diverr           //check r4 (y) if zero

.temp r5,r6,r7
      if (r1 <s 0) goto divnegR1
      if (r4 <s 0) goto divnegR4

divpos:
      r1 := r4 / r1                      // + / + = + 
      goto divstack

divnegR1:
      if (r4 <s 0) goto divnegneg        // r1 - r4 -
      r1 := ~r1
      r1 := r1 + 1                       // make r1 pos
      goto divnegpos                     // r1 + r4 +

divnegR4:
      if (r1 <s 0) goto divnegneg        // r1 - r4 -
      r4 := ~r4
      r4 := r4 + 1                       // make r4 positive
      goto divnegpos                     // r1 + r4 +

divnegneg:
      r1 := r1 nand r1
      r1 := r1 + 1 
      r4 := r4 nand r4
      r4 := r4 + 1
      r1 := r4 / r1
      goto divstack

divnegpos:
       r1 := r4 / r1
       r1 := r1 nand r1
       r1 := r1 + 1 
       goto divstack

diverr:
      output "Error: Cannot divide by zero\n"
      goto enddiv

divstack:
      pop stack r3                     
      pop stack r3
      push r1 on stack r3  
      goto enddiv

enddiv:
      .temp r6,r7
      pop r4 off stack r2               // restore non-volatile registers
      //pop r5 off stack r2             //pop return address (r1) off into r5
      
      goto waiting                      // goto return address

############################## negation ########################################
neg: 
      //push r1 on stack r2
      push r4 on stack r2  

      r1 := m[r0][r3]  
      r1 := ~r1
      pop stack r3
      push r1 on stack r3 

      pop r4 off stack r2               // restore non-volatile registers
      //pop r5 off stack r2             //pop return address (r1) off into r5
      
      goto waiting                      // goto return address
